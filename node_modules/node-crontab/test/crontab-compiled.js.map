{"version":3,"sources":["crontab.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,WAAR,CAAb;AAAA,IACI,UAAU,QAAQ,mBAAR,CADd;;AAGA,SAAS,SAAT,EAAoB,YAAU;AAC1B,OAAG,qBAAH,EAA0B,UAAS,IAAT,EAAc;AACpC;AACA,YAAI,QAAQ,QAAQ,WAAR,CAAoB,WAApB,EAAiC,YAAU;AACnD,oBAAQ,GAAR,CAAY,aAAZ;AACH,SAFW,CAAZ;AAGA,eAAO,OAAO,KAAd,EAAsB,EAAtB,CAAyB,EAAzB,CAA4B,OAAO,IAAI,IAAJ,GAAW,OAAX,EAAnC;AACA;AACH,KAPD;;AASA,OAAG,wBAAH,EAA6B,UAAS,IAAT,EAAc;AACvC;AACA,YAAI,OAAO,IAAI,IAAJ,EAAX;AACA,YAAI,MAAM,KAAK,OAAL,KAAe,CAAzB;AACA,YAAI,QAAQ,KAAK,QAAL,KAAgB,CAA5B;AACA,YAAG,QAAQ,CAAX,EAAa;AACT,kBAAM,EAAN;AACA,qBAAS,CAAT;AACH;AACD,YAAG,UAAU,CAAb,EAAe;AACX,oBAAQ,EAAR;AACH;AACD,YAAI,sBAAsB,SAAU,GAAV,GAAiB,GAAjB,GAAwB,KAAxB,GAAiC,IAA3D;AACA,YAAI,QAAQ,QAAQ,WAAR,CAAoB,mBAApB,EAAyC,YAAU;AAC3D,oBAAQ,GAAR,CAAY,aAAZ;AACH,SAFW,CAAZ;AAGA,eAAO,OAAO,KAAd,EAAsB,EAAtB,CAAyB,EAAzB,CAA4B,OAAO,IAAI,IAAJ,GAAW,OAAX,EAAnC;AACA;AACH,KAlBD;;AAoBA,OAAG,eAAH,EAAoB,UAAS,IAAT,EAAc;AAC9B;AACA,YAAI,QAAQ,QAAQ,WAAR,CAAoB,aAApB,EAAmC,YAAU;AACrD;AACH,SAFW,EAET,IAFS,EAEH,IAFG,EAEG,KAFH,CAAZ;AAGA,mBAAW,YAAU;AACjB,iBAAK,yBAAL;AACH,SAFD,EAEG,IAFH;AAGH,KARD;;AAUA,OAAG,cAAH,EAAmB,UAAS,IAAT,EAAc;AAC7B;AACA,YAAI,QAAQ,QAAQ,WAAR,CAAoB,aAApB,EAAmC,YAAU;AACrD,oBAAQ,GAAR,CAAY,cAAZ;AACH,SAFW,CAAZ;AAGA,YAAI,WAAW,QAAQ,SAAR,CAAkB,KAAlB,CAAf;AACA,eAAO,QAAP,EAAiB,EAAjB,CAAoB,EAApB,CAAuB,IAAvB;AACA;AACH,KARD;;AAUA,OAAG,gCAAH,EAAqC,UAAS,IAAT,EAAc;AAC/C;AACA,YAAI;AACA,oBAAQ,WAAR,CAAoB,kBAApB,EAAwC,YAAU;AAC9C,wBAAQ,GAAR,CAAY,2BAAZ;AACH,aAFD;AAGA,iBAAK,2BAAL;AACH,SALD,CAKC,OAAM,CAAN,EAAQ;AACL,mBAAO,EAAE,OAAT,EAAkB,EAAlB,CAAqB,EAArB,CAAwB,qCAAxB;AACA;AACH;AACJ,KAXD;;AAaA,OAAG,iCAAH,EAAsC,UAAS,IAAT,EAAc;AAChD;AACA,YAAI,SAAS,QAAQ,SAAR,CAAmB,IAAI,IAAJ,EAAD,CAAa,OAAb,EAAlB,CAAb;AACA,eAAO,MAAP,EAAe,EAAf,CAAkB,EAAlB,CAAqB,KAArB;AACA;AACH,KALD;AAMH,CArED","file":"crontab-compiled.js","sourcesContent":["var expect = require('expect.js'),\r\n    crontab = require('../lib/crontab.js');\r\n\r\ndescribe('Crontab', function(){\r\n    it('creates normal task', function(done){\r\n        //Creates a task\r\n        var jobId = crontab.scheduleJob(\"* * * * *\", function(){\r\n            console.log(\"Hello world\");\r\n        });\r\n        expect(typeof(jobId)).to.be(typeof(new Date().getTime()));\r\n        done();\r\n    });\r\n\r\n    it('creates long-term task', function(done){\r\n        //This test schedules a function for yesterday of this month (or the 28th of the previous month if today is the first), which should make the difference be greater than MAX_SET_TIMEOUT, meaning this should be scheduled in the delayed queue\r\n        var date = new Date();\r\n        var day = date.getDate()-1;\r\n        var month = date.getMonth()+1;\r\n        if(day === 0){\r\n            day = 28;\r\n            month -= 1;\r\n        }\r\n        if(month === 0){\r\n            month = 12;\r\n        }\r\n        var yesterdayOfNextYear = \"* * \" + (day) + \" \" + (month) + \" *\";\r\n        var jobId = crontab.scheduleJob(yesterdayOfNextYear, function(){\r\n            console.log(\"Hello world\");\r\n        });\r\n        expect(typeof(jobId)).to.be(typeof(new Date().getTime()));\r\n        done();\r\n    });\r\n\r\n    it('executes task', function(done){\r\n        //This job relies on cron-parser's support for second-based parsing, schedules a task that should fire on the next second\r\n        var jobId = crontab.scheduleJob(\"* * * * * *\", function(){\r\n            done();\r\n        }, null, null, false);\r\n        setTimeout(function(){\r\n            done(\"Didn't execute callback\");\r\n        }, 2000);\r\n    });\r\n\r\n    it('cancels task', function(done){\r\n        //Schedules a task, then cancels it and expects canceled to be true\r\n        var jobId = crontab.scheduleJob(\"* * * * * *\", function(){\r\n            console.log(\"Hello world.\");\r\n        });\r\n        var canceled = crontab.cancelJob(jobId);\r\n        expect(canceled).to.be(true);\r\n        done();\r\n    });\r\n\r\n    it('should break with invalid cron', function(done){\r\n        //Trying to schedule a task with an invalid cron time, cron-parser is actually responsible for the exception we're receiving\r\n        try {\r\n            crontab.scheduleJob(\"this should fail\", function(){\r\n                console.log(\"Should never make it here\");\r\n            });\r\n            done(\"Didn't throw an exception\");\r\n        }catch(e){\r\n            expect(e.message).to.be(\"Invalid characters, got value: this\");\r\n            done();\r\n        }\r\n    });\r\n\r\n    it('fails to cancel invalid task id', function(done){\r\n        //Tries to cancel a task that shouldn't exist.\r\n        var result = crontab.cancelJob((new Date()).getTime());\r\n        expect(result).to.be(false);\r\n        done();\r\n    });\r\n});"]}