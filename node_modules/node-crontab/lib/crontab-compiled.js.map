{"version":3,"sources":["crontab.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,aAAR,CAAb;;AAEA,IAAI,kBAAkB,UAAtB,C,CAAkC;AAClC,IAAI,gBAAgB,EAApB;AACA,IAAI,eAAe,EAAnB;AACA,IAAI,yBAAyB,IAA7B;;AAEA,IAAI,cAAc,UAAS,QAAT,EAAmB,QAAnB,EAA6B,IAA7B,EAAmC,OAAnC,EAA4C,SAA5C,EAAuD,aAAvD,EAAqE;AACnF,QAAG,aAAa,IAAhB,EAAsB,YAAY,IAAZ;AACtB,QAAI,WAAW,OAAO,mBAAP,CAA2B,QAA3B,CAAf;AAAA,QACI,aAAa,SAAS,IAAT,KAAmB,IAAI,IAAJ,EADpC;AAAA,QAEI,UAAU,IAFd;AAAA,QAGI,oBAAoB,aAHxB;;AAKA,QAAG,qBAAqB,IAAxB,EAA6B;AACzB;AACA,4BAAqB,IAAI,IAAJ,EAAD,CAAW,OAAX,EAApB;AACH;AACD,QAAG,aAAa,eAAhB,EAAgC;AAC5B,qBAAa,iBAAb,IAAkC,CAAC,QAAD,EAAW,QAAX,EAAqB,IAArB,EAA2B,OAA3B,EAAoC,SAApC,EAA+C,iBAA/C,CAAlC;AACA,YAAG,0BAA0B,IAA7B,EAAkC;AAC9B;AACH;AACJ,KALD,MAKK;AACD,kBAAU,WAAW,WAAW,IAAX,CAAgB,IAAhB,EAAsB,QAAtB,EAAgC,QAAhC,EAA0C,IAA1C,EAAgD,OAAhD,EAAyD,SAAzD,EAAoE,iBAApE,CAAX,EAAmG,UAAnG,CAAV;AACA,sBAAc,iBAAd,IAAmC,OAAnC;AACH;AACD,WAAO,iBAAP;AACH,CArBD;;AAuBA,IAAI,4BAA4B,YAAU;AACtC,6BAAyB,YAAY,YAAU;AAC3C,YAAI,OAAO,OAAO,IAAP,CAAY,YAAZ,CAAX;AACA,aAAI,IAAI,IAAI,CAAR,EAAW,KAAK,KAAK,MAAzB,EAAiC,IAAI,EAArC,EAAyC,GAAzC,EAA6C;AACzC,gBAAI,OAAO,aAAa,KAAK,CAAL,CAAb,CAAX;AACA,mBAAO,aAAa,KAAK,CAAL,CAAb,CAAP;AACA,wBAAY,KAAZ,CAAkB,IAAlB,EAAwB,IAAxB;AACH;AACD,YAAG,OAAO,IAAP,CAAY,YAAZ,EAA0B,MAA1B,KAAqC,CAAxC,EAA0C;AACtC;AACH;AACJ,KAVwB,EAUtB,eAVsB,CAAzB;AAWH,CAZD;;AAcA,IAAI,+BAA+B,YAAU;AACzC,QAAG,0BAA0B,IAA7B,EAAkC;AAC9B,sBAAc,sBAAd;AACA,iCAAyB,IAAzB;AACH;AACJ,CALD;;AAOA,IAAI,YAAY,UAAS,EAAT,EAAY;AACxB,QAAI,MAAM,cAAc,EAAd,CAAV;AACA,QAAI,aAAa,aAAa,EAAb,CAAjB;AACA,QAAI,UAAU,KAAd;AACA,QAAG,OAAO,IAAV,EAAe;AACX,qBAAa,GAAb;AACA,eAAO,cAAc,EAAd,CAAP;AACA,kBAAU,IAAV;AACH;AACD,QAAG,cAAc,IAAjB,EAAsB;AAClB,eAAO,aAAa,EAAb,CAAP;AACA,YAAG,OAAO,IAAP,CAAY,YAAZ,EAA0B,MAA1B,KAAqC,CAAxC,EAA0C;AACtC;AACH;AACD,kBAAU,IAAV;AACH;AACD,WAAO,OAAP;AACH,CAjBD;;AAmBA,IAAI,aAAa,UAAS,QAAT,EAAmB,QAAnB,EAA6B,IAA7B,EAAmC,OAAnC,EAA4C,SAA5C,EAAuD,aAAvD,EAAqE;AAClF,QAAG,SAAH,EAAa;AACT;AACA,oBAAY,KAAZ,CAAkB,IAAlB,EAAwB,SAAxB;AACH;AACD,aAAS,KAAT,CAAe,OAAf,EAAwB,IAAxB;AACH,CAND;;AAQA,OAAO,OAAP,GAAiB;AACb,iBAAa,WADA;AAEb,eAAW;AAFE,CAAjB","file":"crontab-compiled.js","sourcesContent":["var parser = require('cron-parser');\r\n\r\nvar MAX_SET_TIMEOUT = 2147483647; //Also known as the maximum 32bit integer, the highest number setTimeout/setInterval will allow\r\nvar scheduledJobs = {};\r\nvar delayedQueue = {};\r\nvar delayedQueueIntervalId = null;\r\n\r\nvar scheduleJob = function(cronTime, callback, args, context, repeating, previousIndex){\r\n    if(repeating == null) repeating = true;\r\n    var interval = parser.parseExpressionSync(cronTime),\r\n        difference = interval.next() - (new Date()),\r\n        timeout = null,\r\n        scheduledJobIndex = previousIndex;\r\n\r\n    if(scheduledJobIndex == null){\r\n        //Just a cheap way to get a unique ID. Used later to cancel jobs.\r\n        scheduledJobIndex = (new Date).getTime();\r\n    }\r\n    if(difference > MAX_SET_TIMEOUT){\r\n        delayedQueue[scheduledJobIndex] = [cronTime, callback, args, context, repeating, scheduledJobIndex];\r\n        if(delayedQueueIntervalId == null){\r\n            setUpDelayedQueueInterval();\r\n        }\r\n    }else{\r\n        timeout = setTimeout(executeJob.bind(this, cronTime, callback, args, context, repeating, scheduledJobIndex), difference);\r\n        scheduledJobs[scheduledJobIndex] = timeout;\r\n    }\r\n    return scheduledJobIndex;\r\n};\r\n\r\nvar setUpDelayedQueueInterval = function(){\r\n    delayedQueueIntervalId = setInterval(function(){\r\n        var keys = Object.keys(delayedQueue);\r\n        for(var i = 0, ii = keys.length; i < ii; i++){\r\n            var task = delayedQueue[keys[i]];\r\n            delete delayedQueue[keys[i]];\r\n            scheduleJob.apply(this, task);\r\n        }\r\n        if(Object.keys(delayedQueue).length === 0){\r\n            tearDownDelayedQueueInterval();\r\n        }\r\n    }, MAX_SET_TIMEOUT);\r\n};\r\n\r\nvar tearDownDelayedQueueInterval = function(){\r\n    if(delayedQueueIntervalId != null){\r\n        clearInterval(delayedQueueIntervalId);\r\n        delayedQueueIntervalId = null;\r\n    }\r\n};\r\n\r\nvar cancelJob = function(id){\r\n    var job = scheduledJobs[id];\r\n    var delayedJob = delayedQueue[id];\r\n    var deleted = false;\r\n    if(job != null){\r\n        clearTimeout(job);\r\n        delete scheduledJobs[id];\r\n        deleted = true;\r\n    }\r\n    if(delayedJob != null){\r\n        delete delayedQueue[id];\r\n        if(Object.keys(delayedQueue).length === 0){\r\n            tearDownDelayedQueueInterval();\r\n        }\r\n        deleted = true;\r\n    }\r\n    return deleted;\r\n};\r\n\r\nvar executeJob = function(cronTime, callback, args, context, repeating, previousIndex){\r\n    if(repeating){\r\n        //I do this before the callback so jobs could actually cancel themselves if they'd like.\r\n        scheduleJob.apply(this, arguments);\r\n    }\r\n    callback.apply(context, args);\r\n};\r\n\r\nmodule.exports = {\r\n    scheduleJob: scheduleJob,\r\n    cancelJob: cancelJob\r\n};"]}