{"version":3,"sources":["pipeline.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,UAAU,QAAQ,WAAR,CAAd;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA;;;;AAIA,OAAO,OAAP,GAAiB,QAAjB;;AAEA;;;;;;;;AAQA,SAAS,QAAT,CAAmB,QAAnB,EAA6B,OAA7B,EAAsC,IAAtC,EAA4C,IAA5C,EAAkD;AAChD,aAAW,SAAS,GAAT,CAAa,OAAb,CAAX;AACA,MAAI,YAAY,KAAK,KAAL,CAAW,CAAX,CAAhB;AACA,MAAI,KAAK,KAAK,MAAL,IAAe,CAAxB;;AAEA;AACA,WAAS,IAAT,CAAe,GAAf,EAAoB;AAClB,QAAI,GAAJ,EAAS,OAAO,MAAM,GAAN,EAAW,OAAO,SAAP,EAAkB,CAAlB,CAAX,CAAP;AACT,QAAI,KAAK,SAAS,KAAT,EAAT;AACA,WAAO,MAAM,GAAG,SAAH,KAAiB,IAA9B,EAAoC,KAAK,SAAS,KAAT,EAAL;AACpC,QAAI,KAAK,OAAO,SAAP,EAAkB,CAAlB,EAAqB,MAArB,CAA4B,SAA5B,EAAuC,KAAvC,CAA6C,CAA7C,EAAgD,EAAhD,CAAT;AACA,QAAI,CAAC,EAAD,IAAO,KAAK,EAAL,CAAX,EAAqB,OAAO,KAAK,IAAL,CAAU,OAAV,EAAmB,IAAnB,EAAyB,EAAzB,CAAP;AACrB,WAAO,GAAG,IAAH,CAAQ,OAAR,EAAiB,EAAjB,EAAqB,IAArB,CAAP;AACD;;AAED;AACA,WAAS,KAAT,CAAgB,GAAhB,EAAqB,EAArB,EAAyB;AACvB,QAAI,KAAK,SAAS,KAAT,EAAT;AACA,WAAO,MAAM,GAAG,SAAH,KAAiB,IAA9B,EAAoC,KAAK,SAAS,KAAT,EAAL;AACpC,QAAI,KAAK,GAAG,MAAH,CAAU,SAAV,EAAqB,KAArB,CAA2B,CAA3B,EAA8B,KAAK,CAAnC,CAAT;AACA,QAAI,CAAC,EAAD,IAAO,KAAK,EAAL,CAAX,EAAqB,OAAO,KAAK,IAAL,CAAU,OAAV,EAAmB,GAAnB,CAAP;AACrB,WAAO,GAAG,IAAH,CAAQ,OAAR,EAAiB,GAAjB,EAAsB,EAAtB,EAA0B,IAA1B,CAAP;AACD;;AAED;AACA,OAAK,KAAL,CAAW,IAAX,EAAiB,CAAC,IAAD,EAAO,MAAP,CAAc,IAAd,CAAjB;AACD;;AAED;;;;AAIA,SAAS,IAAT,CAAe,IAAf,EAAqB;AACnB,SAAO,KAAK,MAAL,KACD,OAAO,KAAK,CAAL,CAAP,KAAmB,WAAnB,IAAkC,KAAK,CAAL,MAAY,IAD7C,CAAP;AAED","file":"pipeline-compiled.js","sourcesContent":["/**\n * Module Dependencies\n */\n\nvar compile = require('./compile')\nvar sliced = require('sliced')\n\n/**\n * Export `Pipeline`\n */\n\nmodule.exports = Pipeline\n\n/**\n * Initialize `Pipeline`\n *\n * @param {Array} series array of functions\n * @param {Array} args\n * @param {Function} done\n */\n\nfunction Pipeline (pipeline, context, args, done) {\n  pipeline = pipeline.map(compile)\n  var remaining = args.slice(1)\n  var al = args.length || 1\n\n  // run in series\n  function next (err) {\n    if (err) return error(err, sliced(arguments, 1))\n    var fn = pipeline.shift()\n    while (fn && fn.__catch__ === true) fn = pipeline.shift()\n    var na = sliced(arguments, 1).concat(remaining).slice(0, al)\n    if (!fn || exit(na)) return done.call(context, null, na)\n    return fn.call(context, na, next)\n  }\n\n  // error handling\n  function error (err, ca) {\n    var fn = pipeline.shift()\n    while (fn && fn.__catch__ !== true) fn = pipeline.shift()\n    var na = ca.concat(remaining).slice(0, al + 1)\n    if (!fn || exit(na)) return done.call(context, err)\n    return fn.call(context, err, na, next)\n  }\n\n  // kick us off\n  next.apply(null, [null].concat(args))\n}\n\n/**\n * Early exit\n */\n\nfunction exit (args) {\n  return args.length\n    && (typeof args[0] === 'undefined' || args[0] === null)\n}\n"]}