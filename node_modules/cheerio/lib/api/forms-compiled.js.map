{"version":3,"sources":["forms.js"],"names":[],"mappings":"AAAA;AACA;AACA,IAAI,sBAAsB,8BAA1B;AAAA,IACI,MAAM,MADV;AAAA,IAEI,QAAQ,QAFZ;AAAA,IAGI,IAAI;AACF,OAAK,QAAQ,YAAR;AADH,CAHR;;AAOA,QAAQ,SAAR,GAAoB,YAAW;AAC7B;AACA,MAAI,MAAM,KAAK,cAAL,EAAV;;AAEA;AACA,MAAI,SAAS,EAAE,GAAF,CAAM,GAAN,EAAW,UAAS,IAAT,EAAe;AACrC,WAAO,mBAAmB,KAAK,IAAxB,IAAgC,GAAhC,GAAsC,mBAAmB,KAAK,KAAxB,CAA7C;AACD,GAFY,CAAb;;AAIA;AACA,SAAO,OAAO,IAAP,CAAY,GAAZ,EAAiB,OAAjB,CAAyB,GAAzB,EAA8B,GAA9B,CAAP;AACD,CAXD;;AAaA,QAAQ,cAAR,GAAyB,YAAW;AAClC;AACA,MAAI,UAAU,KAAK,WAAnB;AACA,SAAO,KAAK,GAAL,CAAS,YAAW;AACvB,QAAI,OAAO,IAAX;AACA,QAAI,QAAQ,QAAQ,IAAR,CAAZ;AACA,QAAI,KAAK,IAAL,KAAc,MAAlB,EAA0B;AACxB,aAAO,MAAM,IAAN,CAAW,mBAAX,EAAgC,OAAhC,EAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAM,MAAN,CAAa,mBAAb,EAAkC,OAAlC,EAAP;AACD;AACF,GARI,EAQF,MARE;AASD;AACA;AACA;AADA,IAEE;AACF;AAHA,IAIE;AACN;AAfK,IAgBH,GAhBG,CAgBC,UAAS,CAAT,EAAY,IAAZ,EAAkB;AACtB,QAAI,QAAQ,QAAQ,IAAR,CAAZ;AACA,QAAI,OAAO,MAAM,IAAN,CAAW,MAAX,CAAX;AACA,QAAI,MAAM,MAAM,GAAN,EAAV;;AAEA;AACA,QAAI,OAAO,IAAX,EAAiB;AACf,aAAO,IAAP;AACD,KAFD,MAEO;AACL;AACA,UAAI,MAAM,OAAN,CAAc,GAAd,CAAJ,EAAwB;AACtB,eAAO,EAAE,GAAF,CAAM,GAAN,EAAW,UAAS,GAAT,EAAc;AAC9B;AACA;AACA,iBAAO,EAAC,MAAM,IAAP,EAAa,OAAO,IAAI,OAAJ,CAAa,KAAb,EAAoB,MAApB,CAApB,EAAP;AACD,SAJM,CAAP;AAKF;AACC,OAPD,MAOO;AACL,eAAO,EAAC,MAAM,IAAP,EAAa,OAAO,IAAI,OAAJ,CAAa,KAAb,EAAoB,MAApB,CAApB,EAAP;AACD;AACF;AACH;AACC,GAtCI,EAsCF,GAtCE,EAAP;AAuCD,CA1CD","file":"forms-compiled.js","sourcesContent":["// https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n// https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\nvar submittableSelector = 'input,select,textarea,keygen',\n    r20 = /%20/g,\n    rCRLF = /\\r?\\n/g,\n    _ = {\n      map: require('lodash.map')\n    };\n\nexports.serialize = function() {\n  // Convert form elements into name/value objects\n  var arr = this.serializeArray();\n\n  // Serialize each element into a key/value string\n  var retArr = _.map(arr, function(data) {\n    return encodeURIComponent(data.name) + '=' + encodeURIComponent(data.value);\n  });\n\n  // Return the resulting serialization\n  return retArr.join('&').replace(r20, '+');\n};\n\nexports.serializeArray = function() {\n  // Resolve all form elements from either forms or collections of form elements\n  var Cheerio = this.constructor;\n  return this.map(function() {\n      var elem = this;\n      var $elem = Cheerio(elem);\n      if (elem.name === 'form') {\n        return $elem.find(submittableSelector).toArray();\n      } else {\n        return $elem.filter(submittableSelector).toArray();\n      }\n    }).filter(\n        // Verify elements have a name (`attr.name`) and are not disabled (`:disabled`)\n        '[name!=\"\"]:not(:disabled)'\n        // and cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n        + ':not(:submit, :button, :image, :reset, :file)'\n        // and are either checked/don't have a checkable state\n        + ':matches([checked], :not(:checkbox, :radio))'\n    // Convert each of the elements to its value(s)\n    ).map(function(i, elem) {\n      var $elem = Cheerio(elem);\n      var name = $elem.attr('name');\n      var val = $elem.val();\n\n      // If there is no value set (e.g. `undefined`, `null`), then return nothing\n      if (val == null) {\n        return null;\n      } else {\n        // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n        if (Array.isArray(val)) {\n          return _.map(val, function(val) {\n            // We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n            //   These can occur inside of `<textarea>'s`\n            return {name: name, value: val.replace( rCRLF, '\\r\\n' )};\n          });\n        // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n        } else {\n          return {name: name, value: val.replace( rCRLF, '\\r\\n' )};\n        }\n      }\n    // Convert our result to an array\n    }).get();\n};\n"]}