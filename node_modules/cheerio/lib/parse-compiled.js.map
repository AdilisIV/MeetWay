{"version":3,"sources":["parse.js"],"names":[],"mappings":"AAAA;;;AAGA,IAAI,aAAa,QAAQ,aAAR,CAAjB;;AAEA;;;AAGA,UAAU,OAAO,OAAP,GAAiB,UAAS,OAAT,EAAkB,OAAlB,EAA2B;AACpD,MAAI,MAAM,QAAQ,QAAR,CAAiB,OAAjB,EAA0B,OAA1B,CAAV;;AACI;AACA,SAAO,QAAQ,QAAR,CAAiB,eAAjB,EAAkC,OAAlC,EAA2C,CAA3C,CAFX;;AAIA,OAAK,IAAL,GAAY,MAAZ;;AAEA;AACA,UAAQ,MAAR,CAAe,GAAf,EAAoB,IAApB;;AAEA,SAAO,IAAP;AACD,CAXD;;AAaA,QAAQ,QAAR,GAAmB,UAAS,OAAT,EAAkB,OAAlB,EAA2B;AAC5C;;AAEA,MAAI,GAAJ;;AAEA,MAAI,OAAO,OAAP,KAAmB,QAAnB,IAA+B,OAAO,QAAP,CAAgB,OAAhB,CAAnC,EAA6D;AAC3D,UAAM,WAAW,QAAX,CAAoB,OAApB,EAA6B,OAA7B,CAAN;AACD,GAFD,MAEO;AACL,UAAM,OAAN;AACD;;AAED,SAAO,GAAP;AACD,CAZD;;AAcA;;;AAGA,QAAQ,MAAR,GAAiB,UAAS,GAAT,EAAc,MAAd,EAAsB;AACrC;AACA,MAAI,CAAC,MAAM,OAAN,CAAc,GAAd,CAAL,EAAyB,MAAM,CAAC,GAAD,CAAN;;AAEzB;AACA,MAAI,MAAJ,EAAY;AACV,WAAO,QAAP,GAAkB,GAAlB;AACD,GAFD,MAEO;AACL,aAAS,IAAT;AACD;;AAED;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAAI,MAAxB,EAAgC,GAAhC,EAAqC;AACnC,QAAI,OAAO,IAAI,CAAJ,CAAX;;AAEA;AACA,QAAI,YAAY,KAAK,MAAL,IAAe,KAAK,IAApC;AAAA,QACI,cAAc,aAAa,UAAU,QADzC;AAEA,QAAI,eAAe,gBAAgB,GAAnC,EAAwC;AACtC,kBAAY,MAAZ,CAAmB,YAAY,OAAZ,CAAoB,IAApB,CAAnB,EAA8C,CAA9C;AACA,UAAI,KAAK,IAAT,EAAe;AACb,aAAK,IAAL,CAAU,IAAV,GAAiB,KAAK,IAAtB;AACD;AACD,UAAI,KAAK,IAAT,EAAe;AACb,aAAK,IAAL,CAAU,IAAV,GAAiB,KAAK,IAAtB;AACD;AACF;;AAED,QAAI,MAAJ,EAAY;AACV,WAAK,IAAL,GAAY,IAAI,IAAI,CAAR,KAAc,IAA1B;AACA,WAAK,IAAL,GAAY,IAAI,IAAI,CAAR,KAAc,IAA1B;AACD,KAHD,MAGO;AACL,WAAK,IAAL,GAAY,KAAK,IAAL,GAAY,IAAxB;AACD;;AAED,QAAI,UAAU,OAAO,IAAP,KAAgB,MAA9B,EAAsC;AACpC,WAAK,IAAL,GAAY,MAAZ;AACA,WAAK,MAAL,GAAc,IAAd;AACD,KAHD,MAGO;AACL,WAAK,IAAL,GAAY,IAAZ;AACA,WAAK,MAAL,GAAc,MAAd;AACD;AACF;;AAED,SAAO,MAAP;AACD,CA7CD;;AA+CA","file":"parse-compiled.js","sourcesContent":["/*\n  Module Dependencies\n*/\nvar htmlparser = require('htmlparser2');\n\n/*\n  Parser\n*/\nexports = module.exports = function(content, options) {\n  var dom = exports.evaluate(content, options),\n      // Generic root element\n      root = exports.evaluate('<root></root>', options)[0];\n\n  root.type = 'root';\n\n  // Update the dom using the root\n  exports.update(dom, root);\n\n  return root;\n};\n\nexports.evaluate = function(content, options) {\n  // options = options || $.fn.options;\n\n  var dom;\n\n  if (typeof content === 'string' || Buffer.isBuffer(content)) {\n    dom = htmlparser.parseDOM(content, options);\n  } else {\n    dom = content;\n  }\n\n  return dom;\n};\n\n/*\n  Update the dom structure, for one changed layer\n*/\nexports.update = function(arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr];\n\n  // Update parent\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  }\n\n  // Update neighbors\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i];\n\n    // Cleanly remove existing nodes from their previous structures.\n    var oldParent = node.parent || node.root,\n        oldSiblings = oldParent && oldParent.children;\n    if (oldSiblings && oldSiblings !== arr) {\n      oldSiblings.splice(oldSiblings.indexOf(node), 1);\n      if (node.prev) {\n        node.prev.next = node.next;\n      }\n      if (node.next) {\n        node.next.prev = node.prev;\n      }\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    if (parent && parent.type === 'root') {\n      node.root = parent;\n      node.parent = null;\n    } else {\n      node.root = null;\n      node.parent = parent;\n    }\n  }\n\n  return parent;\n};\n\n// module.exports = $.extend(exports);\n"]}