{"version":3,"sources":["parser.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,iBAAiB,QAAQ,cAAR,CAArB;;AAEA,SAAS,UAAT,GAAsB,CAAE;;AAExB;;;;;;AAMA,WAAW,WAAX,GAAyB,SAAS,WAAT,CAAsB,KAAtB,EAA6B;AACpD,MAAI,QAAQ,MAAM,KAAN,CAAY,GAAZ,CAAZ;;AAEA,MAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO;AACL,gBAAU,eAAe,KAAf,CAAqB,KAArB;AADL,KAAP;AAGD,GAJD,MAIO,IAAI,MAAM,MAAN,GAAe,CAAnB,EAAsB;AAC3B,WAAO;AACL,gBAAU,eAAe,KAAf,CAAqB,KAArB,CADL;AAEL,eAAS,MAAM,KAAN,CAAY,CAAZ,EAAe,MAAM,MAArB;AAFJ,KAAP;AAID,GALM,MAKA;AACL,UAAM,IAAI,KAAJ,CAAU,oBAAoB,KAA9B,CAAN;AACD;AACF,CAfD;;AAiBA;;;;;;;;AAQA,WAAW,eAAX,GAA6B,SAAS,eAAT,CAA0B,UAA1B,EAAsC,OAAtC,EAA+C,QAA/C,EAAyD;AACpF,SAAO,eAAe,KAAf,CAAqB,UAArB,EAAiC,OAAjC,EAA0C,QAA1C,CAAP;AACD,CAFD;;AAIA;;;;;;;AAOA,WAAW,WAAX,GAAyB,SAAS,WAAT,CAAsB,IAAtB,EAA4B;AACnD,MAAI,OAAO,IAAX;AACA,MAAI,SAAS,KAAK,KAAL,CAAW,IAAX,CAAb;;AAEA,MAAI,WAAW;AACb,eAAW,EADE;AAEb,iBAAa,EAFA;AAGb,YAAQ;AAHK,GAAf;;AAMA,OAAK,IAAI,IAAI,CAAR,EAAW,IAAI,OAAO,MAA3B,EAAmC,IAAI,CAAvC,EAA0C,GAA1C,EAA+C;AAC7C,QAAI,QAAQ,OAAO,CAAP,CAAZ;AACA,QAAI,UAAU,IAAd;AACA,QAAI,QAAQ,MAAM,OAAN,CAAc,YAAd,EAA4B,EAA5B,CAAZ,CAH6C,CAGA;;AAE7C,QAAI,MAAM,MAAN,GAAe,CAAnB,EAAsB;AACpB,UAAI,MAAM,KAAN,CAAY,IAAZ,CAAJ,EAAuB;AAAE;AACvB;AACD,OAFD,MAEO,IAAK,UAAU,MAAM,KAAN,CAAY,aAAZ,CAAf,EAA4C;AAAE;AACnD,iBAAS,SAAT,CAAmB,QAAQ,CAAR,CAAnB,IAAiC,QAAQ,CAAR,CAAjC;AACD,OAFM,MAEA;AAAE;AACP,YAAI,SAAS,IAAb;;AAEA,YAAI;AACF,mBAAS,KAAK,WAAL,CAAiB,OAAO,KAAxB,CAAT;AACA,mBAAS,WAAT,CAAqB,IAArB,CAA0B,OAAO,QAAjC;AACD,SAHD,CAGE,OAAO,GAAP,EAAY;AACZ,mBAAS,MAAT,CAAgB,KAAhB,IAAyB,GAAzB;AACD;AACF;AACF;AACF;;AAED,SAAO,QAAP;AACD,CAlCD;;AAoCA;;;;;;;AAOA,WAAW,SAAX,GAAuB,SAAS,SAAT,CAAoB,QAApB,EAA8B,QAA9B,EAAwC;AAC7D,UAAQ,IAAR,EAAc,QAAd,CAAuB,QAAvB,EAAiC,UAAS,GAAT,EAAc,IAAd,EAAoB;AACnD,QAAI,GAAJ,EAAS;AACP,eAAS,GAAT;AACA;AACD;;AAED,WAAO,SAAS,IAAT,EAAe,WAAW,WAAX,CAAuB,KAAK,QAAL,EAAvB,CAAf,CAAP;AACD,GAPD;AAQD,CATD;;AAWA,OAAO,OAAP,GAAiB,UAAjB","file":"parser-compiled.js","sourcesContent":["'use strict';\n\nvar CronExpression = require('./expression');\n\nfunction CronParser() {}\n\n/**\n * Parse crontab entry\n *\n * @private\n * @param {String} entry Crontab file entry/line\n */\nCronParser._parseEntry = function _parseEntry (entry) {\n  var atoms = entry.split(' ');\n\n  if (atoms.length === 6) {\n    return {\n      interval: CronExpression.parse(entry)\n    };\n  } else if (atoms.length > 6) {\n    return {\n      interval: CronExpression.parse(entry),\n      command: atoms.slice(6, atoms.length)\n    };\n  } else {\n    throw new Error('Invalid entry: ' + entry);\n  }\n};\n\n/**\n * Wrapper for CronExpression.parser method\n *\n * @public\n * @param {String} expression Input expression\n * @param {Object} [options] Parsing options\n * @return {Object}\n */\nCronParser.parseExpression = function parseExpression (expression, options, callback) {\n  return CronExpression.parse(expression, options, callback);\n};\n\n/**\n * Parse content string\n *\n * @public\n * @param {String} data Crontab content\n * @return {Object}\n */\nCronParser.parseString = function parseString (data) {\n  var self = this;\n  var blocks = data.split('\\n');\n\n  var response = {\n    variables: {},\n    expressions: [],\n    errors: {}\n  };\n\n  for (var i = 0, c = blocks.length; i < c; i++) {\n    var block = blocks[i];\n    var matches = null;\n    var entry = block.replace(/^\\s+|\\s+$/g, ''); // Remove surrounding spaces\n\n    if (entry.length > 0) {\n      if (entry.match(/^#/)) { // Comment\n        continue;\n      } else if ((matches = entry.match(/^(.*)=(.*)$/))) { // Variable\n        response.variables[matches[1]] = matches[2];\n      } else { // Expression?\n        var result = null;\n\n        try {\n          result = self._parseEntry('0 ' + entry);\n          response.expressions.push(result.interval);\n        } catch (err) {\n          response.errors[entry] = err;\n        }\n      }\n    }\n  }\n\n  return response;\n};\n\n/**\n * Parse crontab file\n *\n * @public\n * @param {String} filePath Path to file\n * @param {Function} callback\n */\nCronParser.parseFile = function parseFile (filePath, callback) {\n  require('fs').readFile(filePath, function(err, data) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    return callback(null, CronParser.parseString(data.toString()));\n  });\n};\n\nmodule.exports = CronParser;\n"]}