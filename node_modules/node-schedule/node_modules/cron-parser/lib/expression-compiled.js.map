{"version":3,"sources":["expression.js"],"names":[],"mappings":"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","file":"expression-compiled.js","sourcesContent":["'use strict';\n\n// Load Date class extensions\nvar CronDate = require('./date');\n\n/**\n * Construct a new expression parser\n *\n * Options:\n *   currentDate: iterator start date\n *   endDate: iterator end date\n *\n * @constructor\n * @private\n * @param {Object} fields  Expression fields parsed values\n * @param {Object} options Parser options\n */\nfunction CronExpression (fields, options) {\n  this._options = options;\n  this._currentDate = new CronDate(options.currentDate);\n  this._endDate = options.endDate ? new CronDate(options.endDate) : null;\n  this._fields = {};\n  this._isIterator = options.iterator || false;\n  this._hasIterated = false;\n  this._utc = options.utc || false;\n\n  // Map fields\n  for (var i = 0, c = CronExpression.map.length; i < c; i++) {\n    var key = CronExpression.map[i];\n    this._fields[key] = fields[i];\n  }\n}\n\n/**\n * Field mappings\n * @type {Array}\n */\nCronExpression.map = [ 'second', 'minute', 'hour', 'dayOfMonth', 'month', 'dayOfWeek' ];\n\n/**\n * Prefined intervals\n * @type {Object}\n */\nCronExpression.predefined = {\n  '@yearly': '0 0 1 1 *',\n  '@monthly': '0 0 1 * *',\n  '@weekly': '0 0 * * 0',\n  '@daily': '0 0 * * *',\n  '@hourly': '0 * * * *'\n};\n\n/**\n * Fields constraints\n * @type {Array}\n */\nCronExpression.constraints = [\n  [ 0, 59 ], // Second\n  [ 0, 59 ], // Minute\n  [ 0, 23 ], // Hour\n  [ 1, 31 ], // Day of month\n  [ 1, 12 ], // Month\n  [ 0, 7 ] // Day of week\n];\n\n/**\n * Days in month\n * @type {number[]}\n */\nCronExpression.daysInMonth = [\n  31,\n  28,\n  31,\n  30,\n  31,\n  30,\n  31,\n  31,\n  30,\n  31,\n  30,\n  31\n];\n\n/**\n * Field aliases\n * @type {Object}\n */\nCronExpression.aliases = {\n  month: {\n    jan: 1,\n    feb: 2,\n    mar: 3,\n    apr: 4,\n    may: 5,\n    jun: 6,\n    jul: 7,\n    aug: 8,\n    sep: 9,\n    oct: 10,\n    nov: 11,\n    dec: 12\n  },\n\n  dayOfWeek: {\n    sun: 0,\n    mon: 1,\n    tue: 2,\n    wed: 3,\n    thu: 4,\n    fri: 5,\n    sat: 6\n  }\n};\n\n/**\n * Field defaults\n * @type {Array}\n */\nCronExpression.parseDefaults = [ '0', '*', '*', '*', '*', '*' ];\n\n/**\n * Parse input interval\n *\n * @param {String} field Field symbolic name\n * @param {String} value Field value\n * @param {Array} constraints Range upper and lower constraints\n * @return {Array} Sequence of sorted values\n * @private\n */\nCronExpression._parseField = function _parseField (field, value, constraints) {\n  // Replace aliases\n  switch (field) {\n    case 'month':\n    case 'dayOfWeek':\n      var aliases = CronExpression.aliases[field];\n\n      value = value.replace(/[a-z]{1,3}/gi, function(match) {\n        match = match.toLowerCase();\n\n        if (typeof aliases[match] !== undefined) {\n          return aliases[match];\n        } else {\n          throw new Error('Cannot resolve alias \"' + match + '\"')\n        }\n      });\n      break;\n  }\n\n  // Check for valid characters.\n  if (!(/^[\\d|/|*|\\-|,]+$/.test(value))) {\n    throw new Error('Invalid characters, got value: ' + value)\n  }\n\n  // Replace '*'\n  if (value.indexOf('*') !== -1) {\n    value = value.replace(/\\*/g, constraints.join('-'));\n  }\n\n  //\n  // Inline parsing functions\n  //\n  // Parser path:\n  //  - parseSequence\n  //    - parseRepeat\n  //      - parseRange\n\n  /**\n   * Parse sequence\n   *\n   * @param {String} val\n   * @return {Array}\n   * @private\n   */\n  function parseSequence (val) {\n    var stack = [];\n\n    function handleResult (result) {\n      var max = stack.length > 0 ? Math.max.apply(Math, stack) : -1;\n\n      if (result instanceof Array) { // Make sequence linear\n        for (var i = 0, c = result.length; i < c; i++) {\n          var value = result[i];\n\n          // Check constraints\n          if (value < constraints[0] || value > constraints[1]) {\n            throw new Error(\n                'Constraint error, got value ' + value + ' expected range ' +\n                constraints[0] + '-' + constraints[1]\n            );\n          }\n\n          if (value > max) {\n            stack.push(value);\n          }\n\n          max = Math.max.apply(Math, stack);\n        }\n      } else { // Scalar value\n        result = +result;\n\n        // Check constraints\n        if (result < constraints[0] || result > constraints[1]) {\n          throw new Error(\n            'Constraint error, got value ' + result + ' expected range ' +\n            constraints[0] + '-' + constraints[1]\n          );\n        }\n\n        if (field == 'dayOfWeek') {\n          result = result % 7;\n        }\n\n        if (result > max) {\n          stack.push(result);\n        }\n      }\n    }\n\n    var atoms = val.split(',');\n    if (atoms.length > 1) {\n      for (var i = 0, c = atoms.length; i < c; i++) {\n        handleResult(parseRepeat(atoms[i]));\n      }\n    } else {\n      handleResult(parseRepeat(val));\n    }\n\n    return stack;\n  }\n\n  /**\n   * Parse repetition interval\n   *\n   * @param {String} val\n   * @return {Array}\n   */\n  function parseRepeat (val) {\n    var repeatInterval = 1;\n    var atoms = val.split('/');\n\n    if (atoms.length > 1) {\n      return parseRange(atoms[0], atoms[atoms.length - 1]);\n    }\n\n    return parseRange(val, repeatInterval);\n  }\n\n  /**\n   * Parse range\n   *\n   * @param {String} val\n   * @param {Number} repeatInterval Repetition interval\n   * @return {Array}\n   * @private\n   */\n  function parseRange (val, repeatInterval) {\n    var stack = [];\n    var atoms = val.split('-');\n\n    if (atoms.length > 1 ) {\n      // Invalid range, return value\n      if (atoms.length < 2 || !atoms[0].length) {\n        return +val;\n      }\n\n      // Validate range\n      var min = +atoms[0];\n      var max = +atoms[1];\n\n      if (Number.isNaN(min) || Number.isNaN(max) ||\n          min < constraints[0] || max > constraints[1]) {\n        throw new Error(\n          'Constraint error, got range ' +\n          min + '-' + max +\n          ' expected range ' +\n          constraints[0] + '-' + constraints[1]\n        );\n      } else if (min >= max) {\n        throw new Error('Invalid range: ' + val);\n      }\n\n      // Create range\n      var repeatIndex = +repeatInterval;\n\n      if (Number.isNaN(repeatIndex) || repeatIndex <= 0) {\n        throw new Error('Constraint error, cannot repeat at every ' + repeatIndex + ' time.');\n      }\n\n      for (var index = min, count = max; index <= count; index++) {\n        if (repeatIndex > 0 && (repeatIndex % repeatInterval) === 0) {\n          repeatIndex = 1;\n          stack.push(index);\n        } else {\n          repeatIndex++;\n        }\n      }\n\n      return stack;\n    }\n\n    return +val;\n  }\n\n  return parseSequence(value);\n};\n\n/**\n * Find next matching schedule date\n *\n * @return {CronDate}\n * @private\n */\nCronExpression.prototype._findSchedule = function _findSchedule () {\n  /**\n   * Match field value\n   *\n   * @param {String} value\n   * @param {Array} sequence\n   * @return {Boolean}\n   * @private\n   */\n  function matchSchedule (value, sequence) {\n    for (var i = 0, c = sequence.length; i < c; i++) {\n      if (sequence[i] >= value) {\n        return sequence[i] === value;\n      }\n    }\n\n    return sequence[0] === value;\n  }\n\n  /**\n   * Detect if input range fully matches constraint bounds\n   * @param {Array} range Input range\n   * @param {Array} constraints Input constraints\n   * @returns {Boolean}\n   * @private\n   */\n  function isWildcardRange (range, constraints) {\n    if (range instanceof Array && !range.length) {\n      return false;\n    }\n\n    if (constraints.length !== 2) {\n      return false;\n    }\n\n    return range.length === (constraints[1] - (constraints[0] < 1 ? - 1 : 0));\n  }\n  \n  var method = function(name) {\n    return !this._utc ? name : ('getUTC' + name.slice(3));\n  }.bind(this);\n\n  var currentDate = new CronDate(this._currentDate);\n  var endDate = this._endDate;\n\n  // TODO: Improve this part\n  // Always increment second value when second part is present\n  if (this._fields.second.length > 1 && !this._hasIterated) {\n    currentDate.addSecond();\n  }\n\n  // Find matching schedule\n  while (true) {\n    // Validate timespan\n    if (endDate && (endDate.getTime() - currentDate.getTime()) < 0) {\n      throw new Error('Out of the timespan range');\n    }\n\n    // Day of month and week matching:\n    //\n    // \"The day of a command's execution can be specified by two fields --\n    // day of month, and day of week.  If  both\t fields\t are  restricted  (ie,\n    // aren't  *),  the command will be run when either field matches the cur-\n    // rent time.  For example, \"30 4 1,15 * 5\" would cause a command to be\n    // run at 4:30 am on the  1st and 15th of each month, plus every Friday.\"\n    //\n    // http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5\n    //\n\n    var dayOfMonthMatch = matchSchedule(currentDate[method('getDate')](), this._fields.dayOfMonth);\n    var dayOfWeekMatch = matchSchedule(currentDate[method('getDay')](), this._fields.dayOfWeek);\n\n    var isDayOfMonthWildcardMatch = isWildcardRange(this._fields.dayOfMonth, CronExpression.constraints[3]);\n    var isMonthWildcardMatch = isWildcardRange(this._fields.month, CronExpression.constraints[4]);\n    var isDayOfWeekWildcardMatch = isWildcardRange(this._fields.dayOfWeek, CronExpression.constraints[5]);\n\n    // Validate days in month if explicit value is given\n    if (!isMonthWildcardMatch) {\n      var currentYear = currentDate[method('getFullYear')]();\n      var currentMonth = currentDate[method('getMonth')]() + 1;\n      var previousMonth = currentMonth === 1 ? 11 : currentMonth - 1;\n      var daysInPreviousMonth = CronExpression.daysInMonth[previousMonth - 1];\n      var daysOfMontRangeMax = this._fields.dayOfMonth[this._fields.dayOfMonth.length - 1];\n\n      var _daysInPreviousMonth = daysInPreviousMonth;\n      var _daysOfMontRangeMax = daysOfMontRangeMax;\n\n      // Handle leap year\n      var isLeap = !((currentYear % 4) || (!(currentYear % 100) && (currentYear % 400)));\n      if (isLeap) {\n        _daysInPreviousMonth = 29;\n        _daysOfMontRangeMax = 29;\n      }\n\n      if (this._fields.month[0] === previousMonth && _daysInPreviousMonth < _daysOfMontRangeMax) {\n        throw new Error('Invalid explicit day of month definition');\n      }\n    }\n\n    // Add day if select day not match with month (according to calendar)\n    if (!dayOfMonthMatch || !dayOfWeekMatch) {\n      currentDate.addDay();\n      continue;\n    }\n\n    // Add day if not day of month is set (and no match) and day of week is wildcard\n    if (!isDayOfMonthWildcardMatch && isDayOfWeekWildcardMatch && !dayOfMonthMatch) {\n      currentDate.addDay();\n      continue;\n    }\n\n    // Add day if not day of week is set (and no match) and day of month is wildcard\n    if (isDayOfMonthWildcardMatch && !isDayOfWeekWildcardMatch && !dayOfWeekMatch) {\n      currentDate.addDay();\n      continue;\n    }\n\n    // Add day if day of mont and week are non-wildcard values and both doesn't match\n    if (!(isDayOfMonthWildcardMatch && isDayOfWeekWildcardMatch) &&\n        !dayOfMonthMatch && !dayOfWeekMatch) {\n      currentDate.addDay();\n      continue;\n    }\n\n    // Match month\n    if (!matchSchedule(currentDate[method('getMonth')]() + 1, this._fields.month)) {\n      currentDate.addMonth();\n      continue;\n    }\n\n    // Match hour\n    if (!matchSchedule(currentDate[method('getHours')](), this._fields.hour)) {\n      currentDate.addHour();\n      continue;\n    }\n\n    // Match minute\n    if (!matchSchedule(currentDate[method('getMinutes')](), this._fields.minute)) {\n      currentDate.addMinute();\n      continue;\n    }\n\n    // Match second\n    if (!matchSchedule(currentDate[method('getSeconds')](), this._fields.second)) {\n      currentDate.addSecond();\n      continue;\n    }\n\n    break;\n  }\n\n  // When internal date is not mutated, append one second as a padding\n  var nextDate = new CronDate(currentDate);\n  if (this._currentDate !== currentDate) {\n    nextDate.addSecond();\n  }\n\n  this._currentDate = nextDate;\n  this._hasIterated = true;\n\n  return currentDate;\n};\n\n/**\n * Find next suitable date\n *\n * @public\n * @return {CronDate|Object}\n */\nCronExpression.prototype.next = function next () {\n  var schedule = this._findSchedule();\n\n  // Try to return ES6 compatible iterator\n  if (this._isIterator) {\n    return {\n      value: schedule,\n      done: !this.hasNext()\n    };\n  }\n\n  return schedule;\n};\n\n/**\n * Check if next suitable date exists\n *\n * @public\n * @return {Boolean}\n */\nCronExpression.prototype.hasNext = function() {\n  var current = this._currentDate;\n\n  try {\n    this.next();\n    return true;\n  } catch (err) {\n    return false;\n  } finally {\n    this._currentDate = current;\n  }\n};\n\n/**\n * Iterate over expression iterator\n *\n * @public\n * @param {Number} steps Numbers of steps to iterate\n * @param {Function} callback Optional callback\n * @return {Array} Array of the iterated results\n */\nCronExpression.prototype.iterate = function iterate (steps, callback) {\n  var dates = [];\n\n  for (var i = 0, c = steps; i < c; i++) {\n    try {\n      var item = this.next();\n      dates.push(item);\n\n      // Fire the callback\n      if (callback) {\n        callback(item, i);\n      }\n    } catch (err) {\n      break;\n    }\n  }\n\n  return dates;\n};\n\n/**\n * Reset expression iterator state\n *\n * @public\n */\nCronExpression.prototype.reset = function reset () {\n  this._currentDate = new CronDate(this._options.currentDate);\n};\n\n/**\n * Parse input expression (async)\n *\n * @public\n * @param {String} expression Input expression\n * @param {Object} [options] Parsing options\n * @param {Function} [callback]\n */\nCronExpression.parse = function parse (expression, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  function parse (expression, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.currentDate) {\n      options.currentDate = new CronDate();\n    }\n\n    // Is input expression predefined?\n    if (CronExpression.predefined[expression]) {\n      expression = CronExpression.predefined[expression];\n    }\n\n    // Split fields\n    var fields = [];\n    var atoms = expression.split(' ');\n\n    // Resolve fields\n    var start = (CronExpression.map.length - atoms.length);\n    for (var i = 0, c = CronExpression.map.length; i < c; ++i) {\n      var field = CronExpression.map[i]; // Field name\n      var value = atoms[atoms.length > c ? i : i - start]; // Field value\n\n      if (i < start || !value) {\n        fields.push(CronExpression._parseField(\n          field,\n          CronExpression.parseDefaults[i],\n          CronExpression.constraints[i])\n        );\n      } else { // Use default value\n        fields.push(CronExpression._parseField(\n          field,\n          value,\n          CronExpression.constraints[i])\n        );\n      }\n    }\n\n    return new CronExpression(fields, options);\n  }\n\n  return parse(expression, options);\n};\n\nmodule.exports = CronExpression;\n"]}