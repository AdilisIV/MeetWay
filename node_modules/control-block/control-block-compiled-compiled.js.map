{"version":3,"sources":["control-block-compiled.js"],"names":[],"mappings":"AAAA;;;AAGA,SAAS,KAAT,CAAe,OAAf,EAAwB;AACvB,MAAK,OAAL,GAAe,MAAM,OAArB;AACA,MAAK,QAAL,GAAgB,OAAhB;AACA;AACD,MAAM,OAAN,GAAgB,IAAhB;;AAEA;;;;;;;;AAQA,MAAM,KAAN,GAAc,UAAU,CAAV,EAAa;AAC1B,KAAI,KAAK,OAAT,EAAkB,OAAO,KAAK,OAAL,CAAa,KAAb,CAAmB,CAAnB,CAAP,CAAlB,KAAoD,OAAO,CAAP;AACpD,CAFD;;AAIA;;;;;;;;AAQA,MAAM,KAAN,GAAc,UAAU,KAAV,EAAiB,MAAjB,EAAyB;AACtC,KAAI,KAAK,IAAI,KAAJ,CAAU,MAAV,CAAT;AACA,QAAO,GAAG,IAAH,CAAQ,KAAR,CAAP;AACA,CAHD;;AAKA;;;;;;;;AAQA,MAAM,YAAN,GAAqB,YAAY;AAChC;AACA,KAAI,UAAU,KAAK,OAAnB;;AAEA,QAAO,UAAU,GAAV,EAAe;AACrB,MAAI,CAAC,GAAL,EAAU;AACV,MAAI,OAAJ,EAAa,OAAO,QAAQ,KAAR,CAAc,GAAd,CAAP,CAAb,KAA4C,MAAM,GAAN;AAC5C,EAHD;AAIA,CARD;;AAUA;;;;;;;;AAQA,MAAM,SAAN,CAAgB,KAAhB,GAAwB,UAAU,GAAV,EAAe;AACtC,KAAI,KAAK,QAAT,EAAmB;AAClB,MAAI;AACH,QAAK,QAAL,CAAc,GAAd;AACA,GAFD,CAEE,OAAO,OAAP,EAAgB;AACjB,OAAI,KAAK,OAAT,EAAkB,KAAK,OAAL,CAAa,KAAb,CAAmB,OAAnB,EAAlB,KAAmD,MAAM,OAAN;AACnD;AACD,EAND,MAMO;AACN,MAAI,KAAK,OAAT,EAAkB,KAAK,OAAL,CAAa,KAAb,CAAmB,GAAnB,EAAlB,KAA+C,MAAM,GAAN;AAC/C;AACD,CAVD;;AAYA;;;;;AAKA,MAAM,SAAN,CAAgB,IAAhB,GAAuB,UAAU,QAAV,EAAoB;AAC1C,KAAI,cAAc,MAAM,OAAxB;AACA,OAAM,OAAN,GAAgB,IAAhB;AACA,KAAI;AACH,MAAI,MAAM,UAAV;AACA,QAAM,OAAN,GAAgB,WAAhB;AACA,SAAO,GAAP;AACA,EAJD,CAIE,OAAO,CAAP,EAAU;AACX,QAAM,OAAN,GAAgB,WAAhB;AACA,OAAK,KAAL,CAAW,CAAX;AACA;AACD,CAXD;;AAaA;;;;;;AAMA,MAAM,SAAN,CAAgB,KAAhB,GAAwB,UAAU,CAAV,EAAa;AACpC,KAAI,EAAE,WAAN,EAAmB,OAAO,CAAP;AACnB,KAAI,OAAO,IAAX;AACA,KAAI,UAAU,YAAY;AACzB,MAAI,cAAc,MAAM,OAAxB;AACA,QAAM,OAAN,GAAgB,IAAhB;AACA,MAAI;AACH,OAAI,MAAM,EAAE,KAAF,CAAQ,IAAR,EAAc,SAAd,CAAV;AACA,SAAM,OAAN,GAAgB,WAAhB;AACA,UAAO,GAAP;AACA,GAJD,CAIE,OAAO,CAAP,EAAU;AACX,SAAM,OAAN,GAAgB,WAAhB;AACA,QAAK,KAAL,CAAW,CAAX;AACA;AACD,EAXD;AAYA,SAAQ,WAAR,GAAsB,IAAtB;AACA,QAAO,OAAP;AACA,CAjBD;;AAmBA;AACA,QAAQ,KAAR,GAAgB,KAAhB;;AAEA","file":"control-block-compiled-compiled.js","sourcesContent":["/**\n * Block class is used for routing errors to higher level logic.\n */\nfunction Block(errback) {\n\tthis._parent = Block.current;\n\tthis._errback = errback;\n}\nBlock.current = null;\n\n/**\n * Wrap a function such that any exceptions it generates\n * are sent to the error callback of the Block that is active\n * at the time of the call to guard().  If no Block\n * is active, just returns the function.\n *\n * Example: stream.on('end', Block.guard(function() { ... }));\n */\nBlock.guard = function (f) {\n\tif (this.current) return this.current.guard(f);else return f;\n};\n\n/**\n * Begins a new Block with two callback functions.  The first\n * is the main part of the block (think 'try body'), the\n * second is the rescue function/error callback (think 'catch').\n * The terminology follows Ruby for no other reason than that\n * Block, begin and rescue describe an exception handling\n * paradigm and are not reserved words in JavaScript.\n */\nBlock.begin = function (block, rescue) {\n\tvar ec = new Block(rescue);\n\treturn ec.trap(block);\n};\n\n/**\n * Returns a function(err) that can be invoked at any time to raise\n * an exception against the now current block (or the current context\n * if no current).  Errors are only raised if the err argument is true\n * so this can be used in both error callbacks and error events.\n *\n * Example: request.on('error', Block.errorHandler())\n */\nBlock.errorHandler = function () {\n\t// Capture the now current Block for later\n\tvar current = this.current;\n\n\treturn function (err) {\n\t\tif (!err) return;\n\t\tif (current) return current.raise(err);else throw err;\n\t};\n};\n\n/**\n * Raises an exception on the Block.  If the block has an\n * error callback, it is given the exception.  Otherwise,\n * raise(...) is called on the parent block.  If there is\n * no parent, the exception is simply raised.\n * Any nested exceptions from error callbacks will be raised\n * on the block's parent.\n */\nBlock.prototype.raise = function (err) {\n\tif (this._errback) {\n\t\ttry {\n\t\t\tthis._errback(err);\n\t\t} catch (nestedE) {\n\t\t\tif (this._parent) this._parent.raise(nestedE);else throw nestedE;\n\t\t}\n\t} else {\n\t\tif (this._parent) this._parent.raise(err);else throw err;\n\t}\n};\n\n/**\n * Executes a callback in the context of this block.  Any\n * errors will be passed to this Block's raise() method.\n * Returns the value of the callback or undefined on error.\n */\nBlock.prototype.trap = function (callback) {\n\tvar origCurrent = Block.current;\n\tBlock.current = this;\n\ttry {\n\t\tvar ret = callback();\n\t\tBlock.current = origCurrent;\n\t\treturn ret;\n\t} catch (e) {\n\t\tBlock.current = origCurrent;\n\t\tthis.raise(e);\n\t}\n};\n\n/**\n * Wraps a function and returns a function that routes\n * errors to this block.  This is similar to trap but\n * returns a new function instead of invoking the callback\n * immediately.\n */\nBlock.prototype.guard = function (f) {\n\tif (f.__guarded__) return f;\n\tvar self = this;\n\tvar wrapped = function () {\n\t\tvar origCurrent = Block.current;\n\t\tBlock.current = self;\n\t\ttry {\n\t\t\tvar ret = f.apply(this, arguments);\n\t\t\tBlock.current = origCurrent;\n\t\t\treturn ret;\n\t\t} catch (e) {\n\t\t\tBlock.current = origCurrent;\n\t\t\tself.raise(e);\n\t\t}\n\t};\n\twrapped.__guarded__ = true;\n\treturn wrapped;\n};\n\n// -- exports\nexports.Block = Block;\n\n//# sourceMappingURL=control-block-compiled.js.map"]}