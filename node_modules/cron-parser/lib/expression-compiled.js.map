{"version":3,"sources":["expression.js"],"names":[],"mappings":"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","file":"expression-compiled.js","sourcesContent":["'use strict';\n\nvar date = require('./date');\n\n/**\n * Construct a new expression parser\n *\n * Options:\n *   currentDate: iterator start date\n *   endDate: iterator end date\n *\n * @constructor\n * @private\n * @param {Object} fields  Expression fields parsed values\n * @param {Object} options Parser options\n */\nfunction CronExpression(fields, options) {\n  this._options = options;\n  this._currentDate = new Date(options.currentDate.toUTCString());\n  this._endDate = options.endDate ? new Date(options.endDate.toUTCString()) : null;\n  this._fields = {};\n\n  // Map fields\n  for (var i = 0, c = CronExpression.map.length; i < c; i++) {\n    var key = CronExpression.map[i];\n    this._fields[key] = fields[i];\n  }\n}\n\n/**\n * Field mappings\n * @type {Array}\n */\nCronExpression.map = [ 'second', 'minute', 'hour', 'dayOfMonth', 'month', 'dayOfWeek' ];\n\n/**\n * Prefined intervals\n * @type {Object}\n */\nCronExpression.predefined = {\n  '@yearly': '0 0 1 1 *',\n  '@monthly': '0 0 1 * *',\n  '@weekly': '0 0 * * 0',\n  '@daily': '0 0 * * *',\n  '@hourly': '0 * * * *'\n};\n\n/**\n * Fields constraints\n * @type {Array}\n */\nCronExpression.constraints = [\n  [ 0, 59 ], // Second\n  [ 0, 59 ], // Minute\n  [ 0, 23 ], // Hour\n  [ 1, 31 ], // Day of month\n  [ 1, 12 ], // Month\n  [ 0, 6 ] // Day of week\n];\n\n/**\n * Field aliases\n * @type {Object}\n */\nCronExpression.aliases = {\n  month: {\n    jan: 1,\n    feb: 2,\n    mar: 3,\n    apr: 4,\n    may: 5,\n    jun: 6,\n    jul: 7,\n    aug: 8,\n    sep: 9,\n    oct: 10,\n    nov: 11,\n    dec: 12\n  },\n\n  dayOfWeek: {\n    sun: 0,\n    mon: 1,\n    tue: 2,\n    wed: 3,\n    thu: 4,\n    fri: 5,\n    sat: 6\n  }\n};\n\n/**\n * Field defaults\n * @type {Array}\n */\nCronExpression.parseDefaults = [ '0', '*', '*', '*', '*', '*' ];\n\n/**\n * Parse input interval\n *\n * @param   {String} field       Field symbolic name\n * @param   {String} value       Field value\n * @param   {Array} constraints  Range upper and lower constraints\n * @return  {Array}              Sequence of sorted values\n * @private\n */\nCronExpression._parseField = function(field, value, constraints) {\n  // Replace aliases\n  switch (field) {\n    case 'month':\n    case 'dayOfWeek':\n      var aliases = CronExpression.aliases[field];\n\n      value = value.replace(/[a-z]{1,3}/gi, function(match) {\n        match = match.toLowerCase();\n        if (aliases[match]) {\n          return aliases[match];\n        } else {\n          throw new Error('Cannot resolve alias \"' + match + '\"')\n        }\n      });\n      break;\n  }\n\n  //Check for valid characters.\n  if(!CronExpression._validateCharacters(value)){\n    throw new Error('Invalid characters, got value: ' + value)\n  }\n\n  // Replace '*'\n  if (value.indexOf('*') !== -1) {\n    value = value.replace(/\\*/g, constraints[0] + '-' + constraints[1]);\n  }\n\n  //\n  // Inline parsing functions\n  //\n  // Parser path:\n  //  - parseSequence\n  //    - parseRepeat\n  //      - parseRange\n\n  /**\n   * Parse sequence\n   *\n   * @param  {String} val\n   * @return {Array}\n   * @private\n   */\n  function parseSequence(val) {\n    var stack = [];\n\n    function handleResult(result) {\n      var max = stack.length > 0 ? Math.max.apply(Math, stack) : -1;\n\n      if (result instanceof Array) { // Make sequence linear\n        result.forEach(function(value, index) {\n          // Check constraints\n          if (!CronExpression._validateConstraint(value, constraints)) {\n            throw new Error(\n              'Constraint error, got value ' + value + ' expected range ' +\n              constraints[0] + '-' + constraints[1]\n            );\n          }\n\n          if (value > max) {\n            stack.push(value);\n          }\n\n          max = Math.max.apply(Math, stack);\n        })\n      } else { // Scalar value\n        result = parseInt(result, 10);\n\n        // Check constraints\n        if (!CronExpression._validateConstraint(result, constraints)) {\n          throw new Error(\n            'Constraint error, got value ' + result + ' expected range ' +\n            constraints[0] + '-' + constraints[1]\n          );\n        }\n\n        if (result > max) {\n          stack.push(result);\n        }\n      }\n    }\n\n    if (val.indexOf(',') !== -1) {\n      var atoms = val.split(',');\n\n      atoms.forEach(function(value, index) {\n        handleResult(parseRepeat(value.toString()));\n      });\n\n    } else {\n      handleResult(parseRepeat(val));\n    }\n\n    return stack;\n  }\n\n  /**\n   * Parse repetition interval\n   *\n   * @param  {String} val\n   * @return {Array}\n   */\n  function parseRepeat(val) {\n    var repeatInterval = 1;\n\n    if (val.indexOf('/') !== -1) {\n      var atoms = val.split('/');\n      repeatInterval = atoms[atoms.length - 1];\n\n      return parseRange(atoms[0], repeatInterval);\n    } else {\n      return parseRange(val, repeatInterval);\n    }\n  }\n\n  /**\n   * Parse range\n   *\n   * @param  {String} val\n   * @param  {Number} repeatInterval Repetition interval\n   * @return {Array}\n   * @private\n   */\n  function parseRange(val, repeatInterval) {\n    var stack = [];\n\n    if (val.indexOf('-') !== -1) {\n      var atoms = val.split('-');\n\n      // Validate format\n      if (atoms.length != 2) {\n        throw new Error('Invalid range format: ' + val);\n      }\n\n      // Validate range\n      var min = parseInt(atoms[0], 10);\n      var max = parseInt(atoms[1], 10);\n\n      if (Number.isNaN(min) || Number.isNaN(max) ||\n          min < constraints[0] || max > constraints[1]) {\n        throw new Error(\n          'Constraint error, got range ' +\n          min + '-' + max +\n          ' expected range ' +\n          constraints[0] + '-' + constraints[1]\n        );\n      } else if (min >= max) {\n        throw new Error('Invalid range: ' + val);\n      }\n\n      // Create range\n      var repeatIndex = repeatInterval;\n\n      for (var index = min, count = max; index <= count; index++) {\n        if (repeatIndex > 0 && (repeatIndex % repeatInterval) === 0) {\n          repeatIndex = 1;\n          stack.push(index);\n        } else {\n          repeatIndex++;\n        }\n      }\n\n      return stack;\n    } else {\n      return val;\n    }\n  }\n\n  return parseSequence(value);\n};\n\nCronExpression._validateCharacters = function(value) {\n  var regex = new RegExp('^[\\\\d|/|*|\\\\-|,]+$');\n  return regex.test(value);\n};\n\n/**\n * Constraint validation\n *\n * @private\n * @static\n * @param  {Object} value     Value to check\n * @return {Boolean}          True if validation succeeds, false if not\n */\nCronExpression._validateConstraint = function(value, constraints) {\n  if (value < constraints[0] || value > constraints[1]) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Timespan validation\n *\n * @private\n * @static\n * @param  {Date} current Current date\n * @param  {Date} end     End date\n * @return {Boolean}         Return true if timespan is still valid, otherwise return false\n */\nCronExpression._validateTimespan = function(current, end) {\n  if (end && (end.getTime() - current.getTime()) < 0) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Find next matching schedule date\n *\n * @return  {Number}\n * @private\n */\nCronExpression.prototype._findSchedule = function() {\n  // Validate timespan\n  if (!CronExpression._validateTimespan(this._currentDate, this._endDate)) {\n    throw new Error('Out of the timespan range');\n  }\n\n  var current = new Date(this._currentDate.toUTCString());\n\n  function findNearest(value, sequence) {\n    for (var i = 0, c = sequence.length; i < c; i++) {\n      if (sequence[i] >= value) {\n        return sequence[i];\n      }\n    }\n\n    return sequence[0];\n  }\n\n  /**\n   * Match field value\n   *\n   * @param  {String} value\n   * @param  {Array} sequence\n   * @return {Boolean}\n   * @private\n   */\n  function matchSchedule(value, sequence) {\n    return findNearest(value, sequence) === value;\n  }\n\n  // Reset\n  if (this._fields.second.length === 1 && this._fields.second[0] === 0) {\n    current.setSeconds(0);\n    current.addMinute();\n  } else {\n    current.addSecond();\n  }\n\n  // Iterate and match schedule\n  while (true) {\n    // Validate timespan\n    if (!CronExpression._validateTimespan(current, this._endDate)) {\n      throw new Error('Out of the timespan range');\n    }\n\n    // Match month\n    if (!matchSchedule(current.getMonth() + 1, this._fields.month)) {\n      current.addMonth();\n      current.setDate(1);\n      current.setHours(0);\n      current.setMinutes(0);\n      current.setSeconds(0);\n      continue;\n    }\n\n    // Match day of month\n    if (!matchSchedule(current.getDate(), this._fields.dayOfMonth)) {\n      current.addDay();\n      current.setHours(0);\n      current.setMinutes(0);\n      current.setSeconds(0);\n      continue;\n    }\n\n    // Match day of week\n    if (!matchSchedule(current.getDay(), this._fields.dayOfWeek)) {\n      current.addDay();\n      current.setHours(0);\n      current.setMinutes(0);\n      current.setSeconds(0);\n      continue;\n    }\n\n    // Match hour\n    if (!matchSchedule(current.getHours(), this._fields.hour)) {\n      current.addHour();\n      current.setMinutes(0);\n      current.setSeconds(0);\n      continue;\n    }\n\n    // Match minute\n    if (!matchSchedule(current.getMinutes(), this._fields.minute)) {\n      current.addMinute();\n      current.setSeconds(0);\n      continue;\n    }\n\n    // Match second\n    if (!matchSchedule(current.getSeconds(), this._fields.second)) {\n      current.addSecond();\n      continue;\n    }\n\n    break;\n  }\n\n  return (this._currentDate = current);\n};\n\n/**\n * Find next suitable date\n *\n * @public\n * @return {Date}\n */\nCronExpression.prototype.next = function() {\n  return this._findSchedule();\n};\n\n/**\n * Check if next suitable date exists\n *\n * @public\n * @return {Boolean}\n */\nCronExpression.prototype.hasNext = function() {\n  var memorized = this._currentDate;\n  try {\n    this.next();\n    return true;\n  }\n  catch(error) {\n    return false;\n  }\n  finally {\n    this._currentDate = memorized;\n  }\n};\n\n/**\n * Iterate over expression iterator\n *\n * @public\n * @param  {Number}   n        Numbers of steps to iterate\n * @param  {Function} callback Optional callback\n * @return {Array}            Array of the iterated results\n */\nCronExpression.prototype.iterate = function(n, callback) {\n  var dates = [];\n\n  for (var i = 0, c = n; i < c; i++) {\n    try {\n      var item = this.next();\n      dates.push(item);\n\n      // Fire the callback\n      if (callback) {\n        callback(item, i);\n      }\n    } catch (e) {\n      break;\n    }\n  }\n\n  return dates;\n};\n\n/**\n * Reset expression iterator state\n *\n * @public\n */\nCronExpression.prototype.reset = function() {\n  this._currentDate = new Date(this._options.currentDate.toUTCString());\n};\n\n/**\n * Parse input expression (async)\n *\n * @public\n * @param  {String}   expression   Input expression\n * @param  {Object}   [options]  Parsing options\n * @param  {Function} callback\n */\nCronExpression.parse = function(expression, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  try {\n    var cronExpression = CronExpression.parseSync(expression, options);\n    callback(null, cronExpression);\n  } catch (e){\n    callback(e);\n  }\n}\n\n/**\n * Parse input expression (sync)\n *\n * @public\n * @param  {String}   expression   Input expression\n * @param  {Object}   [options]  Parsing options\n */\nCronExpression.parseSync = function(expression, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (!options.currentDate) {\n    options.currentDate = new Date();\n  }\n\n  // Is input expression predefined?\n  if (CronExpression.predefined[expression]) {\n    expression = CronExpression.predefined[expression];\n  }\n\n  // Split fields\n  var fields = [];\n  var atoms = expression.split(' ');\n\n  // Resolve fields\n  var start = (CronExpression.map.length - atoms.length);\n  for (var i = 0, c = CronExpression.map.length; i < c; ++i) {\n    var field = CronExpression.map[i]; // Field name\n    var value = atoms[atoms.length > c ? i : i - start]; // Field value\n\n    if (i < start || !value) {\n      fields.push(this._parseField(field, CronExpression.parseDefaults[i], CronExpression.constraints[i]));\n    } else { // Use default value\n      fields.push(this._parseField(field, value, CronExpression.constraints[i]));\n    }\n  }\n\n  return new CronExpression(fields, options);\n};\n\nmodule.exports = CronExpression;\n"]}