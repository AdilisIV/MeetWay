{"version":3,"sources":["parser.js"],"names":[],"mappings":"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","file":"parser-compiled.js","sourcesContent":["'use strict';\n\nvar CronExpression = require('./expression');\n\nfunction CronParser() {\n\n}\n\n/**\n * Parse crontab entry\n *\n * @private\n * @param   {String}   entry    Crontab file entry/line\n * @param   {Function} callback\n */\nCronParser._parseEntry = function(entry, callback) {\n  var atoms = entry.split(' ');\n\n  if (atoms.length === 6) {\n    CronExpression.parse(entry, callback);\n  } else if (atoms.length > 6) {\n    CronExpression.parse(entry, function(err, interval) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(null, {\n        interval: interval,\n        command: atoms.slice(6, atoms.length)\n      });\n    });\n  } else {\n    callback(new Error('Invalid entry: ' + entry));\n  }\n};\n\n/**\n * Wrapper for CronExpression.parser method\n *\n * @public\n * @param  {String}   expression   Input expression\n * @param  {Object}   [options]  Parsing options\n * @param  {Function} callback\n */\nCronParser.parseExpression = function(expression, options, callback) {\n  return CronExpression.parse(expression, options, callback);\n};\n\n\n/**\n * Wrapper for CronExpression.parserSync method\n *\n * @public\n * @param  {String}   expression   Input expression\n * @param  {Object}   [options]  Parsing options\n */\nCronParser.parseExpressionSync = function(expression, options) {\n  return CronExpression.parseSync(expression, options);\n};\n\n\n/**\n * Parse content string\n *\n * @public\n * @param  {String}   data     Crontab content\n * @param  {Function} callback\n */\nCronParser.parseString = function(data, callback) {\n  var self = this;\n  var blocks = data.split('\\n');\n  var count = blocks.length;\n  var called = false;\n\n  var response = {\n    variables: {},\n    expressions: [],\n    errors: {}\n  };\n\n  blocks.forEach(function(entry, index) {\n    var matches = null;\n    entry = entry.replace(/^\\s+|\\s+$/g, ''); // Remove surrounding spaces\n\n    if (entry.length > 0) {\n      if (entry.match(/^#/)) { // Comment\n        count--;\n        return;\n      } else if ((matches = entry.match(/^(.*)=(.*)$/))) { // Variable\n        count--;\n        response.variables[matches[1]] = matches[2];\n        return;\n      } else { // Expression?\n        self._parseEntry('0 ' + entry, function(err, result) {\n          if (err) {\n            response.errors[entry] = err;\n          } else {\n            response.expressions.push(result.interval);\n          }\n\n          if (!called && --count === 0) {\n            called = true;\n            callback(null, response);\n          }\n        });\n      }\n    } else {\n      count--;\n    }\n  });\n\n  if (!called && count === 0) {\n    called = true;\n    callback(null, response);\n  }\n};\n\n/**\n * Parse crontab file\n *\n * @public\n * @param  {String}   filePath  Path to file\n * @param  {Function} callback\n */\nCronParser.parseFile = function(filePath, callback) {\n  var fs = require('fs');\n  fs.readFile(filePath, function(err, data) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    CronParser.parseString(data.toString(), callback);\n  });\n};\n\nmodule.exports = CronParser;\n"]}