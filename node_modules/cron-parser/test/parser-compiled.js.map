{"version":3,"sources":["parser.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,OAAO,QAAQ,KAAR,EAAe,IAA1B;AACA,IAAI,aAAa,QAAQ,eAAR,CAAjB;;AAEA;;AAEA,KAAK,mBAAL,EAA0B,UAAS,CAAT,EAAY;AACpC,aAAW,SAAX,CAAqB,mBAArB,EAA0C,UAAS,GAAT,EAAc,MAAd,EAAsB;AAC9D,MAAE,OAAF,CAAU,GAAV,EAAe,iBAAf;AACA,MAAE,EAAF,CAAK,MAAL,EAAa,uBAAb;;AAEA,MAAE,KAAF,CAAQ,OAAO,IAAP,CAAY,OAAO,SAAnB,EAA8B,MAAtC,EAA8C,CAA9C,EAAiD,0BAAjD;AACA,MAAE,KAAF,CAAQ,OAAO,IAAP,CAAY,OAAO,MAAnB,EAA2B,MAAnC,EAA2C,CAA3C,EAA8C,uBAA9C;AACA,MAAE,KAAF,CAAQ,OAAO,WAAP,CAAmB,MAA3B,EAAmC,CAAnC,EAAsC,4BAAtC;;AAEA;AACA,QAAI,OAAO,IAAX;;AAEA,MAAE,KAAF,CAAQ,OAAO,WAAP,CAAmB,CAAnB,EAAsB,OAAtB,EAAR,EAAyC,IAAzC;AACA,WAAO,OAAO,WAAP,CAAmB,CAAnB,EAAsB,IAAtB,EAAP;AACA,MAAE,EAAF,CAAK,IAAL,EAAW,YAAX;;AAEA,WAAO,OAAO,WAAP,CAAmB,CAAnB,EAAsB,IAAtB,EAAP;AACA,MAAE,EAAF,CAAK,IAAL,EAAW,aAAX;;AAEA,WAAO,OAAO,WAAP,CAAmB,CAAnB,EAAsB,IAAtB,EAAP;AACA,MAAE,EAAF,CAAK,IAAL,EAAW,YAAX;;AAEA,MAAE,GAAF;AACD,GAtBD;AAuBD,CAxBD;;AA0BA,KAAK,cAAL,EAAqB,UAAS,CAAT,EAAW;;AAE9B,MAAI,UAAU;AACZ,iBAAa,IAAI,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CADD;AAEZ,aAAS,IAAI,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB;AAFG,GAAd;AAIA,aAAW,eAAX,CAA2B,WAA3B,EAAwC,OAAxC,EAAiD,UAAS,GAAT,EAAc,QAAd,EAAwB;AACvE,MAAE,OAAF,CAAU,GAAV,EAAe,kBAAf;AACA,MAAE,KAAF,CAAQ,SAAS,OAAT,EAAR,EAA4B,KAA5B;AACA,MAAE,GAAF;AACD,GAJD;AAKD,CAXD","file":"parser-compiled.js","sourcesContent":["var util = require('util');\nvar test = require('tap').test;\nvar CronParser = require('../lib/parser');\n\n// Globals\n\ntest('load crontab file', function(t) {\n  CronParser.parseFile('./crontab.example', function(err, result) {\n    t.ifError(err, 'File read error');\n    t.ok(result, 'Crontab parsed parsed');\n\n    t.equal(Object.keys(result.variables).length, 2, 'variables length matches');\n    t.equal(Object.keys(result.errors).length, 0, 'errors length matches');\n    t.equal(result.expressions.length, 3, 'expressions length matches');\n\n    // Parse expressions\n    var next = null;\n\n    t.equal(result.expressions[0].hasNext(), true);\n    next = result.expressions[0].next();\n    t.ok(next, 'first date');\n\n    next = result.expressions[1].next();\n    t.ok(next, 'second date');\n\n    next = result.expressions[2].next();\n    t.ok(next, 'third date');\n\n    t.end();\n  });\n});\n\ntest('no next date', function(t){\n  \n  var options = {\n    currentDate: new Date(2014, 0, 1),\n    endDate: new Date(2014, 0, 1)\n  };\n  CronParser.parseExpression('* * 2 * *', options, function(err, interval) {\n    t.ifError(err, 'Parse read error');\n    t.equal(interval.hasNext(), false);\n    t.end();\n  });\n})"]}